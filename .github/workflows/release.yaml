name: Release Flow

on:
    push:
        tags:
            - 'v*.*.*'

jobs:
  publish-packages:
    name: Push Packages
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-versions }}
      - uses: addnab/docker-run-action@v3
        with:
            image: valory/open-autonomy-user:latest
            options: -v ${{ github.workspace }}:/work
            run: |
              echo "Pushing Packages"
              cd /work
              export AUTHOR=$(grep 'service' packages/packages.json | awk -F/ '{print $2}' | head -1)
              autonomy init --reset --author $AUTHOR --ipfs --remote
              autonomy push-all
  publish-images:
    name: Publish Docker Images
    runs-on: ${{ matrix.os }}
    needs:
      - "publish-packages"
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
    env:
        DOCKER_USER: ${{secrets.DOCKER_USER}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Set up tag and vars
        uses: addnab/docker-run-action@v3
        with:
            image: valory/open-autonomy-user:latest
            options: -v ${{ github.workspace }}:/work
            run: |
              echo "Setting Tag Images"
              cd /work
              apt-get update && apt-get install git -y || exit 1
              git config --global --add safe.directory /work
              export TAG=$(git describe --exact-match --tags $(git rev-parse HEAD)) || exit 1
              if [ $? -eq 0 ]; then
                  export TAG=`echo $TAG | sed 's/^v//'`
              else
                  echo "You are not on a tagged branch"
                  exit 1
              fi
              echo VERSION=$TAG> env.sh
              echo AUTHOR=$(grep 'service/' packages/packages.json | awk -F/ '{print $2}' | head -1) >> env.sh
              echo SERVICE=$(grep 'service/' packages/packages.json | awk -F/ '{print $3}' | head -1) >> env.sh
              echo AGENT=$(grep 'agent/' packages/packages.json | awk -F/ '{print $3}' | head -1) >> env.sh
              echo DEFAULT_IMAGE_TAG=$(cat packages/packages.json | grep agent/ | awk -F: '{print $2}' | tr -d '", ' | head -n 1) >> env.sh
              cat env.sh

      - uses: addnab/docker-run-action@v3
        name: Build Images
        with:
            image: valory/open-autonomy-user:latest
            options: -v ${{ github.workspace }}:/work -e DOCKER_USER -e DOCKER_PASSWORD
            shell: bash
            run: |
              echo "Building Docker Images"
              cd /work
              source env.sh || exit 1
              echo "Building images for $AUTHOR for service $SERVICE"
              autonomy init --reset --author $AUTHOR --ipfs --remote
              autonomy fetch $AUTHOR/$SERVICE --service --local || exit 1
              cd $SERVICE || exit 1
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin || exit 1
              docker buildx create --name multiarch-builder --driver docker-container --bootstrap --use
              autonomy build-image --builder multiarch-builder --platform linux/amd64,linux/arm64,linux/arm/v7 --pre-install-command "apt install gcc libxml2-dev libxslt-dev -y" --push || exit 1
              autonomy build-image --builder multiarch-builder --platform linux/amd64,linux/arm64,linux/arm/v7 --pre-install-command "apt install gcc libxml2-dev libxslt-dev -y" --push --version $VERSION || exit 1

  build-agent-runner:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest,  macos-14, macos-14-large ]
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      # Set up Python with setup-python action and add it to PATH
      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.10"

      - name: Add Python to PATH
        run: |
          echo "${{ steps.setup-python.outputs.python-path }}" >> $GITHUB_PATH

      - name: Install and configure Poetry
        run: pip install poetry

      - name: Build Agent Runner
        run: |
            make build-agent-runner

      - name: rename the file
        if: runner.os != 'Windows'
        run: | 
          export FILENAME=`echo -n agent_runner_${{runner.os}}_${{runner.arch}}|tr '[:upper:]' '[:lower:]'`
          echo "FILENAME=$FILENAME" >> $GITHUB_ENV; 
          mv dist/agent_runner_bin dist/${FILENAME}

      - name: rename the file
        if: runner.os == 'Windows'
        run: | 
          export FILENAME=`echo -n agent_runner_${{runner.os}}_${{runner.arch}}.exe|tr '[:upper:]' '[:lower:]'`
          echo "FILENAME=$FILENAME" >> $GITHUB_ENV; 
          mv dist/agent_runner_bin.exe dist/${FILENAME}

      - name: Upload Release Assets Windows
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.FILENAME}}
          path: dist/${{env.FILENAME}}

  upload-assets:
      needs: build-agent-runner
      runs-on: ubuntu-latest
      steps:
        - name: Download artifacts
          uses: actions/download-artifact@v4
          with:
            name: agent_runner_macos_x64
            path: ./dist/

        - name: Download artifacts
          uses: actions/download-artifact@v4
          with:
            name: agent_runner_macos_arm64
            path: ./dist/
        - name: Download artifacts
          uses: actions/download-artifact@v4
          with:
            name: agent_runner_windows_x64.exe
            path: ./dist/
        - name: List files
          run: ls ./dist/
        - name: Publish Release
          uses: softprops/action-gh-release@v2
          if: startsWith(github.ref, 'refs/tags/')
          with:
            files: |
              ./dist/agent_runner*